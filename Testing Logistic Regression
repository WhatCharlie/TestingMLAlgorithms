{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "50946e26-2221-41a0-b586-4a5564a8a6ff",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Column_1  Column_2\n",
      "0   0.548814  0.715189\n",
      "1   0.602763  0.544883\n",
      "2   0.423655  0.645894\n",
      "3   0.437587  0.891773\n",
      "4   0.963663  0.383442\n",
      "..       ...       ...\n",
      "95  0.398221  0.209844\n",
      "96  0.186193  0.944372\n",
      "97  0.739551  0.490459\n",
      "98  0.227415  0.254356\n",
      "99  0.058029  0.434417\n",
      "\n",
      "[100 rows x 2 columns]\n",
      "    Column_1  Column_2\n",
      "0   0.736314       1.0\n",
      "1   0.790263       1.0\n",
      "2   0.611155       1.0\n",
      "3   0.625087       1.0\n",
      "4   0.481831       0.0\n",
      "..       ...       ...\n",
      "95  0.199111       0.0\n",
      "96  0.373693       1.0\n",
      "97  0.369775       0.0\n",
      "98  0.113707       0.0\n",
      "99  0.029015       0.0\n",
      "\n",
      "[100 rows x 2 columns]\n",
      "0     0.736314\n",
      "1     0.790263\n",
      "2     0.611155\n",
      "3     0.625087\n",
      "4     0.481831\n",
      "5     0.979225\n",
      "6     0.755545\n",
      "7     0.035518\n",
      "8     0.207718\n",
      "9     0.965657\n",
      "10    1.166118\n",
      "11    0.648979\n",
      "12    0.305774\n",
      "13    0.330853\n",
      "14    0.260924\n",
      "15    0.452056\n",
      "16    0.643650\n",
      "17    0.206290\n",
      "18    0.799596\n",
      "19    1.131248\n",
      "20    0.179754\n",
      "21    0.348816\n",
      "22    0.854267\n",
      "23    0.105191\n",
      "24    0.157714\n",
      "25    0.285098\n",
      "26    0.494187\n",
      "27    0.104438\n",
      "28    0.326554\n",
      "29    0.233155\n",
      "30    0.079485\n",
      "31    0.328165\n",
      "32    0.098291\n",
      "33    0.410497\n",
      "34    0.418972\n",
      "35    0.488230\n",
      "36    1.164261\n",
      "37    0.369632\n",
      "38    0.141403\n",
      "39    0.148070\n",
      "40    0.158992\n",
      "41    0.251647\n",
      "42    0.283301\n",
      "43    0.261624\n",
      "44    0.763446\n",
      "45    0.506069\n",
      "46    0.319298\n",
      "47    0.144703\n",
      "48    0.293256\n",
      "49    0.414470\n",
      "Name: Column_1, dtype: float64 0     1.0\n",
      "1     1.0\n",
      "2     1.0\n",
      "3     1.0\n",
      "4     0.0\n",
      "5     1.0\n",
      "6     1.0\n",
      "7     0.0\n",
      "8     1.0\n",
      "9     1.0\n",
      "10    1.0\n",
      "11    1.0\n",
      "12    1.0\n",
      "13    1.0\n",
      "14    0.0\n",
      "15    1.0\n",
      "16    1.0\n",
      "17    1.0\n",
      "18    1.0\n",
      "19    1.0\n",
      "20    0.0\n",
      "21    0.0\n",
      "22    1.0\n",
      "23    0.0\n",
      "24    0.0\n",
      "25    0.0\n",
      "26    0.0\n",
      "27    0.0\n",
      "28    0.0\n",
      "29    0.0\n",
      "30    0.0\n",
      "31    0.0\n",
      "32    0.0\n",
      "33    0.0\n",
      "34    0.0\n",
      "35    0.0\n",
      "36    1.0\n",
      "37    0.0\n",
      "38    0.0\n",
      "39    0.0\n",
      "40    0.0\n",
      "41    1.0\n",
      "42    0.0\n",
      "43    0.0\n",
      "44    1.0\n",
      "45    1.0\n",
      "46    1.0\n",
      "47    0.0\n",
      "48    0.0\n",
      "49    0.0\n",
      "Name: Column_2, dtype: float64\n",
      "50    0.338908\n",
      "51    0.922694\n",
      "52    0.436253\n",
      "53    0.779542\n",
      "54    0.410582\n",
      "55    0.634625\n",
      "56    0.349740\n",
      "57    0.406899\n",
      "58    1.068603\n",
      "59    1.069235\n",
      "60    0.912754\n",
      "61    1.143584\n",
      "62    0.611355\n",
      "63    0.009597\n",
      "64    0.330087\n",
      "65    0.309008\n",
      "66    0.067737\n",
      "67    0.757465\n",
      "68    0.761825\n",
      "69    0.326052\n",
      "70    0.448273\n",
      "71    0.623365\n",
      "72    0.993694\n",
      "73    0.287727\n",
      "74    0.901741\n",
      "75    0.336948\n",
      "76    0.349993\n",
      "77    0.311320\n",
      "78    0.994819\n",
      "79    0.203592\n",
      "80    0.348714\n",
      "81    0.909556\n",
      "82    1.163022\n",
      "83    0.005857\n",
      "84    0.364995\n",
      "85    0.260518\n",
      "86    0.099998\n",
      "87    0.396849\n",
      "88    0.532852\n",
      "89    0.352207\n",
      "90    0.352194\n",
      "91    0.288614\n",
      "92    1.121714\n",
      "93    0.723133\n",
      "94    0.365061\n",
      "95    0.199111\n",
      "96    0.373693\n",
      "97    0.369775\n",
      "98    0.113707\n",
      "99    0.029015\n",
      "Name: Column_1, dtype: float64 50    0.0\n",
      "51    1.0\n",
      "52    1.0\n",
      "53    1.0\n",
      "54    1.0\n",
      "55    1.0\n",
      "56    0.0\n",
      "57    0.0\n",
      "58    1.0\n",
      "59    1.0\n",
      "60    1.0\n",
      "61    1.0\n",
      "62    1.0\n",
      "63    0.0\n",
      "64    0.0\n",
      "65    0.0\n",
      "66    0.0\n",
      "67    1.0\n",
      "68    1.0\n",
      "69    0.0\n",
      "70    0.0\n",
      "71    1.0\n",
      "72    1.0\n",
      "73    1.0\n",
      "74    1.0\n",
      "75    1.0\n",
      "76    1.0\n",
      "77    1.0\n",
      "78    1.0\n",
      "79    0.0\n",
      "80    0.0\n",
      "81    1.0\n",
      "82    1.0\n",
      "83    0.0\n",
      "84    0.0\n",
      "85    0.0\n",
      "86    0.0\n",
      "87    0.0\n",
      "88    1.0\n",
      "89    0.0\n",
      "90    1.0\n",
      "91    0.0\n",
      "92    1.0\n",
      "93    1.0\n",
      "94    0.0\n",
      "95    0.0\n",
      "96    1.0\n",
      "97    0.0\n",
      "98    0.0\n",
      "99    0.0\n",
      "Name: Column_2, dtype: float64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:30: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n",
      "/var/folders/bt/3390lzb90_s2rvpsqfx38rwc0000gp/T/ipykernel_42730/23495191.py:32: FutureWarning: ChainedAssignmentError: behaviour will change in pandas 3.0!\n",
      "You are setting values through chained assignment. Currently this works in certain cases, but when using Copy-on-Write (which will become the default behaviour in pandas 3.0) this will never work to update the original DataFrame or Series, because the intermediate object on which we are setting values will behave as a copy.\n",
      "A typical example is when you are setting values in a column of a DataFrame, like:\n",
      "\n",
      "df[\"col\"][row_indexer] = value\n",
      "\n",
      "Use `df.loc[row_indexer, \"col\"] = values` instead, to perform the assignment in a single step and ensure this keeps updating the original `df`.\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n",
      "  rd[x][row] = rd[x][row] * 0.5\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats\n",
    "\n",
    "# Set the random seed for reproducibility\n",
    "np.random.seed(0)\n",
    "\n",
    "# Define the number of rows and columns\n",
    "num_rows = 100\n",
    "\n",
    "num_columns = 2\n",
    "\n",
    "# Create a DataFrame with random data\n",
    "random_data = pd.DataFrame(np.random.rand(num_rows, num_columns), \n",
    "                            columns=[f'Column_{i+1}' for i in range(num_columns)])\n",
    "\n",
    "print(random_data)\n",
    "\n",
    "rd = random_data\n",
    "\n",
    "x = 'Column_1'\n",
    "y = 'Column_2'\n",
    "\n",
    "\n",
    "rd[y] = round(rd[y])\n",
    "\n",
    "for row in range(num_rows):\n",
    "    if rd[y][row] == 1:\n",
    "        rd[x][row] = rd[x][row] + 0.25 * 0.75\n",
    "    else:\n",
    "        rd[x][row] = rd[x][row] * 0.5\n",
    "num_rows = num_rows // 2\n",
    "\n",
    "x_train = rd[x][:num_rows]\n",
    "y_train = rd[y][:num_rows]\n",
    "x_test = rd[x][num_rows:]\n",
    "y_test = rd[y][num_rows:]\n",
    "\n",
    "\n",
    "'''\n",
    "Column3 = 'Column_3'\n",
    "Column4 = 'Column_4'\n",
    "'''\n",
    "\n",
    "\n",
    "\n",
    "'''\n",
    "rd[Column3] = (rd[Column3]) + rd.index * np.tan(rd[Column3]) + rd.index\n",
    "rd[Column4] = (rd[Column4]) + rd.index * np.arctan(rd[Column4]) + rd.index\n",
    "'''\n",
    "\n",
    "print(rd)\n",
    "print(x_train, y_train)\n",
    "print(x_test, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "7e2ce1b1-03d8-4c9f-9c06-0f4749234519",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 700x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "size = 1000 / num_rows\n",
    "plt.figure(figsize=(7, 7))\n",
    "threshold = 0.5\n",
    "\n",
    "colors = np.where(rd[y] < threshold, 'blue', 'red')\n",
    "plt.scatter(rd[x], rd[y], c=colors, s=1, zorder=2)\n",
    "\n",
    "plt.grid(which='major', color='#DDDDDD', linewidth=0.8, zorder=1)\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "61319b67-aecd-4f4f-a382-ab1a34db6d01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0 0 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n"
     ]
    }
   ],
   "source": [
    "def init_slope_and_intercept(dataset):\n",
    "    B0 = 0\n",
    "    B1 = 0\n",
    "    B = 0.0000001\n",
    "    B0_list = []\n",
    "    B1_list = []\n",
    "    for row in range(num_rows):\n",
    "        B0_list.append(0)\n",
    "        B1_list.append(0)\n",
    "    return B0, B1, B0_list, B1_list, B\n",
    "\n",
    "B0, B1, B0_list, B1_list, B = init_slope_and_intercept(rd)\n",
    "print(B0, B1, B0_list, B1_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "5c7d9b44-01af-4986-8c9a-bd01ff5e91d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(num, bias, weight):\n",
    "    z = bias + weight * num\n",
    "    ai = 1 / (1 + (np.e ** (-z)))\n",
    "\n",
    "    epsilon = 1e-15\n",
    "    predictions = np.clip(ai, epsilon, 1 - epsilon)\n",
    "    return predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "ce1a95b0-4a57-4226-aaee-7978e8d48ba7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.6931471805599446 -0.08162244596056553 0.04\n"
     ]
    }
   ],
   "source": [
    "def calc_error(bias, weight, samples, dataset):\n",
    "    \n",
    "    n = samples\n",
    "    error_sum = 0\n",
    "    \n",
    "    sum_dl_dw = 0\n",
    "    sum_dl_db = 0\n",
    "    \n",
    "    for row in range(n):\n",
    "        xi = x_train[row]\n",
    "        yi = y_train[row]\n",
    "        \n",
    "        ai = sigmoid(xi, bias, weight)\n",
    "        \n",
    "        dl_dw = (ai - yi) * xi\n",
    "        dl_db = ai - yi\n",
    "        \n",
    "        sum_dl_dw += dl_dw\n",
    "        sum_dl_db += dl_db\n",
    "        \n",
    "        error_sum += yi * np.log(ai) + (1 - yi) * np.log(1 - ai)\n",
    "\n",
    "    avg_dl_dw = sum_dl_dw / n\n",
    "    avg_dl_db = sum_dl_db / n\n",
    "    log_loss = error_sum / n\n",
    "    \n",
    "    return log_loss, avg_dl_dw, avg_dl_db\n",
    "log_loss, avg_dl_dw, avg_dl_db = calc_error(B0, B1, num_rows, rd)\n",
    "print(log_loss, avg_dl_dw, avg_dl_db)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "79e41746-901e-4acf-bd1c-73bac9bbc5c2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-3.5440139860016546 8.154645047795519 14741\n"
     ]
    }
   ],
   "source": [
    "def gradient_descent_of_parameters(learning_rate, max_iterations, min_step_size, bias, weight, samples, dataset):\n",
    "\n",
    "    step_size = 1\n",
    "    iteration = 0\n",
    "    error_list = []\n",
    "    bias_list = []\n",
    "    weight_list = []\n",
    "    while (iteration < max_iterations):\n",
    "\n",
    "        log_loss, avg_dl_dw, avg_dl_db = calc_error(bias, weight, samples, dataset)\n",
    "        error_list.append(log_loss)\n",
    "        weight_list.append(weight)\n",
    "        bias_list.append(bias)\n",
    "        weight = weight - (learning_rate * avg_dl_dw)\n",
    "        bias = bias - (learning_rate * avg_dl_db)\n",
    "        step_size = max(abs(learning_rate * avg_dl_dw), abs(learning_rate * avg_dl_db))\n",
    "        iteration += 1\n",
    "\n",
    "        if step_size < min_step_size:\n",
    "            break\n",
    "            \n",
    "    abs_error_list = [abs(value) for value in error_list]\n",
    "    \n",
    "    return bias, weight, iteration, error_list, weight_list, bias_list, abs_error_list\n",
    "\n",
    "lr = 0.1\n",
    "max_iteration = 50000\n",
    "min_step_size = 0.00001\n",
    "B0, B1, iteration, error_list, weight_list, bias_list, abs_error_list = gradient_descent_of_parameters(lr, max_iteration, min_step_size, B0, B1, num_rows, rd)\n",
    "\n",
    "plt.scatter(weight_list, abs_error_list, s=1)    \n",
    "plt.grid(which='major', color='#DDDDDD', linewidth=0.8)\n",
    "plt.title(f'Errors vs Weight for a Learning Rate of {lr}')\n",
    "plt.xlabel('Weights')\n",
    "plt.ylabel('Errors')\n",
    "plt.show()\n",
    "\n",
    "print(B0, B1, iteration)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "fd5e50e8-9d19-48ed-a9b8-f829832d221d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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v79u3TrUr18fo0aNqvU+ExMTER8fr3mtvpFSQECAxe4DlJeXB39/f8neD4L1S7N+KdcOsH4p1y/l2gHz1a++gmMIqwWgxo0bw9nZWadn5tq1azo9OBUJIfDxxx8jLi4Obm5uWu/5+PgYvU+5XA65XK6z3MnJyaIfTEsfz9awfunWL+XaAdYv5fqlXDtg+vqN2ZfVvutubm4ICwtDenq61vL09HRERkZWue2BAwfw66+/YvLkyTrvRURE6Oxz9+7d1e6TiIiIpMOql8Di4+MRFxeH8PBwREREYPXq1cjLy8PUqVMBPLo0deXKFaxfv15ruzVr1qB79+4ICQnR2efLL7+M3r17Y9GiRRg5ciS2bt2KPXv24NChQxapiYiIiGyfVQNQbGwsCgsLMW/ePOTn5yMkJATbt2/XzOrKz8/XGSBVVFSETZs2YenSpXr3GRkZic8//xyzZ8/GnDlz0LJlS6SlpaF79+5mr4eIiIjsg9UHQU+bNg3Tpk3T+966det0likUCty9e7fKfY4ZMwZjxowxRfOIiIjIAUl35BURERFZRdqRPK3/WgMDEBEREVlM6uFc/OPbMwCAjw5eslo7GICIiIjIYt7bdQ5l4tH/T+kVZLV2MAARERGRRaQezkXRvQea17GP+VutLQxAREREZBHv7ToHAaD65z2YHwMQERERmV353h8vD6tPQmcAIiIiIvMr3/vzUnRrazeHAYiIiIjM66WNWbj1v94fhYerVcf+qDEAERERkdmkHs7FtuNXNa9fHdjWiq35EwMQERERmc17u85p/n9E52Z4qkeAFVvzJwYgIiIiMovyA5/re7jig3GhVm7RnxiAiIiIyCzKD3y2lUtfagxAREREZHLle38UHq42c+lLjQGIiIiITM6We38ABiAiIiIyMVvv/QEYgIiIiMjEbL33B2AAIiIiIhOyh94fgAGIiIiITMgeen8ABiAiIiIykYqPvLDV3h+AAYiIiIhMwFYfeVEZBiAiIiKqNVt95EVlGICIiIioVmz5kReVYQAiIiKiWrGXgc/lMQARERFRjdnLtPeKGICIiIioxuyx9wdgACIiIqIasqdp7xUxABEREZHR7G3ae0UMQERERGQ0e5v2XhEDEBERERnFHqe9V8QAREREREax14HP5TEAERERkVFKHpYBANxdnezu0pcaAxAREREZ7KWNWbj3QAUAkLs4W7k1NccARERERAax95lf5TEAERERkUHsfeZXeQxAREREVC1HmPlVHgMQERERVcsRZn6VxwBEREREVbLnR15UhgGIiIiIKuVIA5/LYwAiIiKiSjnSwOfyGICIiIhIL0cb+FweAxARERHp5WgDn8tjACIiIiIdjjjwuTwGICIiItLiqAOfy2MAIiIiIi2OOvC5PAYgIiIi0qJ+2ruHq5NDDXwujwGIiIiINBzlae/VYQAiIiIiANIY+6Nm9QC0YsUKBAUFwd3dHWFhYTh48GCV65eUlGDWrFkICAiAXC5Hy5Yt8fHHH2veX7duHWQymc7X/fv3zV0KERGRXZPC2B81F2sePC0tDTNmzMCKFSsQFRWFVatWYfDgwTh9+jT8/f31bjN27Fj8/vvvWLNmDVq1aoVr167h4cOHWut4eXnh3LlzWsvc3d3NVgcREZG9c+SbHupj1QC0ZMkSTJ48GVOmTAEApKSkYNeuXVi5ciWSk5N11t+5cycOHDiAixcvomHDhgCAwMBAnfVkMhl8fHzM2nYiIiJHkXo4F3O+OuWwNz3Ux2oBqLS0FMeOHUNCQoLW8piYGGRkZOjdZtu2bQgPD8fixYuxYcMG1K1bFyNGjMD8+fPh4eGhWe/27dsICAhAWVkZunTpgvnz5yM0tPIkW1JSgpKSEs1rpVIJAFCpVFCpVLUp0yDqY1jiWLaI9Uu3finXDrB+Kddva7Uv/+48PFwfjYpReLhgfDc/s7bNXPUbsz+rBaAbN26grKwM3t7eWsu9vb1RUFCgd5uLFy/i0KFDcHd3x5YtW3Djxg1MmzYNN2/e1IwDCg4Oxrp169CxY0colUosXboUUVFROH78OFq3bq13v8nJyUhKStJZnpubC09Pz1pWari8vDyLHcsWsX7p1i/l2gHWL+X6baX2T59sqfU6JyfHIsc1df3FxcUGrysTQgiTHt1AV69eRfPmzZGRkYGIiAjN8oULF2LDhg04e/aszjYxMTE4ePAgCgoKoFAoAACbN2/GmDFjcOfOHa1eIDWVSoWuXbuid+/e+OCDD/S2RV8PkJ+fH/744w94eXnVttRqqVQq5OXlwd/fH05OVh+XbnGsX7r1S7l2gPVLuX5bqj18QTru/2/a+5xh7RD7mP4xuKZkrvqVSiUaNGiAoqKian9/W60HqHHjxnB2dtbp7bl27ZpOr5Car68vmjdvrgk/ANCuXTsIIfDbb7/p7eFxcnLCY489hl9++aXStsjlcsjlcr3bWvKDaenj2RrWL936pVw7wPqlXL+1a089nIubdx9NJJIBGNc90KLHN3X9xuzLat91Nzc3hIWFIT09XWt5eno6IiMj9W4TFRWFq1ev4vbt25pl58+fh5OTE1q0aKF3GyEEsrOz4evra7rGExEROYDy096Hd25mxZZYnlUjd3x8PD766CN8/PHHOHPmDGbOnIm8vDxMnToVAJCYmIinn35as/748ePRqFEjTJw4EadPn8b333+P1157DZMmTdJc/kpKSsKuXbtw8eJFZGdnY/LkycjOztbsk4iIiLSf9i6Fae8VWXUafGxsLAoLCzFv3jzk5+cjJCQE27dvR0DAoxsv5efnaw2QqlevHtLT0zF9+nSEh4ejUaNGGDt2LBYsWKBZ59atW3j22Wc144RCQ0Px/fffo1u3bhavj4iIyBZJ6Y7PlbFqAAKAadOmYdq0aXrfW7dunc6y4OBgnctm5f3zn//EP//5T1M1j4iIyOFI6Y7PlZHmqDMiIiKJkvqlLzUGICIiIgn5WuKXvtQYgIiIiCQi9XAu1Df/83B1luSlLzUGICIiIglQP+8LeHTPn1lD21m3QVbGAERERCQB7+06p+n9UXi4Srr3B2AAIiIicniph3NR9L+Bz1J52nt1GICIiIgc3MJvT2t6f+aPCpF87w/AAEREROTQUg/n4t7/HnYqAxh+/ocBiIiIyEGVH/gMSO95X1VhACIiInJQ5Qc+S/mmh/owABERETkgDnyuGgMQERGRg1Ff+hJ4FH448FkXAxAREZGD4T1/qscARERE5EBSD+dqHnYK8NJXZRiAiIiIHMh7u85p/r8+e38qxQBERETkIF7amKXp/eHA56oxABERETmA1MO52Hb8quY1Bz5XjQGIiIjIAZS/9DWiczOGn2owABEREdm58gOfPVydeMNDAzAAERER2bnyvT9yF2crtsR+MAARERHZMQ58rhkGICIiIjv2NQc+1wgDEBERkZ16aWOW5o7PHq7ODD9GYAAiIiKyQxWnvc8a2s6KrbE/DEBERER2Rv2wUzVOezceAxAREZGdKf+w0/oerpz2XgMMQERERHaEDzs1DQYgIiIiO8KHnZoGAxAREZGd4D1/TIcBiIiIyA7wYaemxQBERERkB8pf+uI9f2qPAYiIiMjGVbz0xXv+1B4DEBERkY3j4y5MjwGIiIjIhvFxF+bBAERERGSjXtqYxcddmAkDEBERkY0qf+mLj7swLQYgIiIiG1Tx0hcfd2FaDEBEREQ2hk96Nz8GICIiIhuz8NvTmv/npS/zYAAiIiKyIS9tzMK9ByoAj+75w0tf5sEAREREZCMqXvoa3rmZFVvj2BiAiIiIbETFS1/s/TEfBiAiIiIbwEtflsUAREREZGW89GV5DEBERERWxktflscAREREZEW89GUdDEBERERW8vqXx3npy0qsHoBWrFiBoKAguLu7IywsDAcPHqxy/ZKSEsyaNQsBAQGQy+Vo2bIlPv74Y611Nm3ahPbt20Mul6N9+/bYsmWLOUsgIiKqkR0nCzT/z0tflmXVAJSWloYZM2Zg1qxZyMrKQq9evTB48GDk5eVVus3YsWOxd+9erFmzBufOncPGjRsRHByseT8zMxOxsbGIi4vD8ePHERcXh7Fjx+KHH36wRElEREQG47O+rMeqAWjJkiWYPHkypkyZgnbt2iElJQV+fn5YuXKl3vV37tyJAwcOYPv27Xj88ccRGBiIbt26ITIyUrNOSkoKBgwYgMTERAQHByMxMRHR0dFISUmxUFVERERVe/3L41qv+awvy3Ox1oFLS0tx7NgxJCQkaC2PiYlBRkaG3m22bduG8PBwLF68GBs2bEDdunUxYsQIzJ8/Hx4eHgAe9QDNnDlTa7uBAwdWGYBKSkpQUlKiea1UKgEAKpUKKpWqJuUZRX0MSxzLFrF+6dYv5doB1i/V+tOO5GHf2WuYFq6Ah6sThnT0wfhufpL6Ppjr3BuzP6sFoBs3bqCsrAze3t5ay729vVFQUKB3m4sXL+LQoUNwd3fHli1bcOPGDUybNg03b97UjAMqKCgwap8AkJycjKSkJJ3lubm58PT0NLa0Gqvq0p8UsH7p1i/l2gHWL7X6uzcB/vNUawB//jcnJ8eKLbIeU5/74uJig9e1WgBSk8lkWq+FEDrL1FQqFWQyGT799FMoFAoAjy6jjRkzBsuXL9f0AhmzTwBITExEfHy85rVSqYSfnx8CAgLg5eVVo7qMoVKpkJeXB39/fzg5WX1cusWxfunWL+XaAdYvxfrTjuRh/jdn4OHqhP881RpHb8gwJlx6T3o317lXX8ExhNUCUOPGjeHs7KzTM3Pt2jWdHhw1X19fNG/eXBN+AKBdu3YQQuC3335D69at4ePjY9Q+AUAul0Mul+ssd3JysugPpaWPZ2tYv3Trl3LtAOuXSv2ph3Mx56ufNQOfAWBMeIAkaq+Mqc+9Mfuy2nfdzc0NYWFhSE9P11qenp6uNai5vKioKFy9ehW3b9/WLDt//jycnJzQokULAEBERITOPnfv3l3pPomIiCxh4benNeGn8msSZClWjZ3x8fH46KOP8PHHH+PMmTOYOXMm8vLyMHXqVACPLk09/fTTmvXHjx+PRo0aYeLEiTh9+jS+//57vPbaa5g0aZLm8tfLL7+M3bt3Y9GiRTh79iwWLVqEPXv2YMaMGdYokYiICKmHczV3ewaA2cM468varDoGKDY2FoWFhZg3bx7y8/MREhKC7du3IyDg0fXQ/Px8rQFS9erVQ3p6OqZPn47w8HA0atQIY8eOxYIFCzTrREZG4vPPP8fs2bMxZ84ctGzZEmlpaejevbvF6yMiIgJ0n/UV+5i/ZAc+2wqrD4KeNm0apk2bpve9devW6SwLDg7WucRV0ZgxYzBmzBhTNI+IiKhW9D3rS0pT3m2VdEdeERERmdlLG7P4rC8bxQBERERkBqmHc7XCD5/1ZVsYgIiIiMyg/LgfPuvL9jAAERERmVj5cT8An/VlixiAiIiITKjiuJ8RnZvhqR7Su9uzrWMAIiIiMqGvOe7HLjAAERERmchLG7M0d3vmuB/bxgBERERkAhVnfXHcj21jACIiIjKBirO+OO7HtjEAERER1RJnfdkfBiAiIqJa4Kwv+8QAREREVEO827P9YgAiIiKqId7t2X4xABEREdUAx/3YNwYgIiIiI+m79MVxP/aFAYiIiMhIvPRl/xiAiIiIjMBLX46BAYiIiMhAnPLuOBiAiIiIDKAv/PDSl/1iACIiIqpGxUHPHPdj/xiAiIiIqlF+0DPAcT+OgAGIiIioChUHPS8YFcJxPw6AAYiIiKgSvN+P42IAIiIiqgTv9+O4GICIiIj04P1+HBsDEBERUQW834/jYwAiIiIqh1PepYEBiIiIqBxOeZcGBiAiIqL/4ZR36WAAIiIiAsf9SA0DEBERSR7H/UgPAxAREUkex/1IDwMQERFJ2ohlhzjuR4IYgIiISLJe2piFE1eKNK857kc6GICIiEiSKo776dRcwXE/EsIAREREkpN6OBezvzqlee3h6oxt03tasUVkaTUKQPfu3cPdu3c1r3Nzc5GSkoLdu3ebrGFERETmwkHPVKMANHLkSKxfvx4AcOvWLXTv3h3vv/8+Ro4ciZUrV5q0gURERKZU8WaHHPcjTTUKQD/99BN69eoFAPjyyy/h7e2N3NxcrF+/Hh988IFJG0hERGQq+m52yHE/0lSjAHT37l14enoCAHbv3o2//vWvcHJyQo8ePZCbm2vSBhIREZkCb3ZI5dUoALVq1QpfffUVLl++jF27diEmJgYAcO3aNXh5eZm0gURERLVVcdAzwHE/UlejAPTWW2/h1VdfRWBgILp3746IiAgAj3qDQkOZpomIyLZUHPTMmx2SS002GjNmDHr27In8/Hx07txZszw6OhqjR482WeOIiIhqq+KdnjnomYAaBKCHDx/C3d0d2dnZOr093bp1M1nDiIiIakvfnZ457oeAGlwCc3FxQUBAAMrKyszRHiIiIpPgnZ6pKjUaAzR79mwkJibi5s2bpm4PERGRSVQc98M7PVN5NRoD9MEHH+DXX39Fs2bNEBAQgLp162q9/9NPP5mkcURERDWhb9wPUXk1CkCjRo0yWQNWrFiBd999F/n5+ejQoQNSUlI0N1msaP/+/ejXr5/O8jNnziA4OBgAsG7dOkycOFFnnXv37sHd3d1k7SYiIts0YtkhjvuhatUoAM2dO9ckB09LS8OMGTOwYsUKREVFYdWqVRg8eDBOnz4Nf3//Src7d+6c1v2GmjRpovW+l5cXzp07p7WM4YeIyPFVHPTMcT9UmRoFILVjx47hzJkzkMlkaN++vdH3AFqyZAkmT56MKVOmAABSUlKwa9curFy5EsnJyZVu17RpU9SvX7/S92UyGXx8fIxqCxER2beKj7no1FzBcT9UqRoFoGvXruHJJ5/E/v37Ub9+fQghUFRUhH79+uHzzz/X6ZHRp7S0FMeOHUNCQoLW8piYGGRkZFS5bWhoKO7fv4/27dtj9uzZOpfFbt++rZmp1qVLF8yfP7/KcFZSUoKSkhLNa6VSCQBQqVRQqVSVbWYy6mNY4li2iPVLt34p1w6wflPWn3YkD3tOF6CO66O5Pe6uzvjqhUib/d7y3JunfmP2V6MANH36dCiVSvz8889o1+7RrcRPnz6NCRMm4KWXXsLGjRur3ceNGzdQVlYGb29vreXe3t4oKCjQu42vry9Wr16NsLAwlJSUYMOGDYiOjsb+/fvRu3dvAEBwcDDWrVuHjh07QqlUYunSpYiKisLx48fRunVrvftNTk5GUlKSzvLc3FzNM88sIS8vz2LHskWsX7r1S7l2gPWbov7uTYBvJrbVWpaTk1Pr/Zobz71p6y8uLjZ4XZkQQhh7AIVCgT179uCxxx7TWv7jjz8iJiYGt27dqnYfV69eRfPmzZGRkaF5lAYALFy4EBs2bMDZs2cNasvw4cMhk8mwbds2ve+rVCp07doVvXv3rvRJ9fp6gPz8/PDHH39Y5NlmKpUKeXl58Pf3h5NTje5MYNdYv3Trl3LtAOs3Vf2xqzLx81Wl5vWQjj5YPKZzFVtYH8+9eepXKpVo0KABioqKqv39XaMeIJVKBVdXV53lrq6uBnc/NW7cGM7Ozjq9PdeuXdPpFapKjx49kJqaWun7Tk5OeOyxx/DLL79Uuo5cLodcLte7rSU/mJY+nq1h/dKtX8q1A6y/NvXrm/H13lj7GfTMc2/a+o3ZV42O2r9/f7z88su4evXPwWZXrlzBzJkzER0dbdA+3NzcEBYWhvT0dK3l6enpiIyMNLgtWVlZ8PX1rfR9IQSys7OrXIeIiOwPZ3xRbdSoB+hf//oXRo4cicDAQPj5+UEmkyEvLw8dO3assjemovj4eMTFxSE8PBwRERFYvXo18vLyMHXqVABAYmIirly5gvXr1wN4NEssMDAQHTp0QGlpKVJTU7Fp0yZs2rRJs8+kpCT06NEDrVu3hlKpxAcffIDs7GwsX768JqUSEZENqviYC1dnGWd8kVFqFID8/Pzw008/IT09HWfPnoUQAu3bt8fjjz9u1H5iY2NRWFiIefPmIT8/HyEhIdi+fTsCAh49pTc/P19rgFRpaSleffVVXLlyBR4eHujQoQO+/fZbDBkyRLPOrVu38Oyzz6KgoAAKhQKhoaH4/vvv+aBWIiIHkXo4F7O/OqW1bO7wDlZqDdkrowdBl38afEhIiLnaZVVKpRIKhcKgQVSmoFKpkJOTg8DAQEleC2b90q1fyrUDrL+m9bd+czseqP781bVgVAie6hFgjiaaDc+9eeo35vc3nwZPRER2Y8SyQ1rhZ0TnZnYXfsg28GnwRERkFyrO+OKgZ6oNPg2eiIhsnr7ww0HPVBtWfxo8ERFRVfRNd2f4odoyOgA9fPgQADBp0iT4+fmZvEFERERqFR9wyunuZCo1GgT93nvvcRA0ERGZVcV7/QCc7k6mU6NB0OoHkBIREZmDvnv92ON0d7JdNRoDNHjwYCQmJuLUqVMICwvTGQQ9YsQIkzSOiIikKWnbz1qvOd2dTK1GAej5558HACxZskTnPZlMxstjRERUY/ru9cPp7mRqNX4aPBERkanxXj9kKUaNARoyZAiKiv78YC5cuBC3bt3SvC4sLET79u1N1jgiIpIOTncnSzIqAO3atQslJSWa14sWLdK6G/TDhw9x7tw507WOiIgkgdPdydKMCkAVn5tq5HNUiYiIdKQdyeN0d7I46T2CloiIbMr8b85oveZ0d7IEowKQTCaDTCbTWUZERGSstCN5Oss43Z0sxahZYEIIPPPMM5DL5QCA+/fvY+rUqZr7AJUfH0RERFSVd7afxZYJbTSvOeOLLMmoADRhwgSt10899ZTOOk8//XTtWkRERA4v6p29vNcPWZVRAWjt2rXmagcREUnEiGWHcOXWfdRxfTQKo0MzL4YfsjgOgiYiIoupeKNDAEh7LsJKrSEpYwAiIiKLqBh+OjTzsmJrSOoYgIiIyOwq3uXZ1VnGnh+yKgYgIiIyq4p3eQZ4o0OyPgYgIiIyG33hhzc6JFvAAERERGahL/zwRodkK4yaBk9ERGQI9vyQrWMPEBERmVTq4Vz2/JDNYwAiIiKTST2ci9lfndJaxrs8ky1iACIiIpNg+CF7wgBEREQmkbTtZ63XfLgp2TIGICIiqrWKDzft1FyBbdN7WrFFRFVjACIiolqJemcvrty6r3nN8EP2gAGIiIhqrGL4aV7fneGH7AIDEBER1Yi+8PPfhGgrtojIcAxARERkNIYfsncMQEREZBSGH3IEDEBERGQwhh9yFAxARERkEIYfciQMQEREVC2GH3I0DEBERFQlhh9yRC7WbgAREdmuLkm7cOveQ81rhh9yFOwBIiIivaLe2cvwQw6LAYiIiHRUvOxV38OF4YccCi+BERGRRurhXMzdegplfz7XlD0/5JAYgIiISOOtraegYvghCeAlMCIiQurhXLRM/JbhhySDPUBERBKXejgXs786pbWM4YccHXuAiIgkjOGHpMrqAWjFihUICgqCu7s7wsLCcPDgwUrX3b9/P2Qymc7X2bNntdbbtGkT2rdvD7lcjvbt22PLli3mLoOIyO68tDFLJ/x0aq5g+CFJsGoASktLw4wZMzBr1ixkZWWhV69eGDx4MPLy8qrc7ty5c8jPz9d8tW7dWvNeZmYmYmNjERcXh+PHjyMuLg5jx47FDz/8YO5yiIjsxksbs7Dt+FWtZc3ru2Pb9J5WahGRZVk1AC1ZsgSTJ0/GlClT0K5dO6SkpMDPzw8rV66scrumTZvCx8dH8+Xs7Kx5LyUlBQMGDEBiYiKCg4ORmJiI6OhopKSkmLkaIiL7oC/8sOeHpMZqg6BLS0tx7NgxJCQkaC2PiYlBRkZGlduGhobi/v37aN++PWbPno1+/fpp3svMzMTMmTO11h84cGCVAaikpAQlJSWa10qlEgCgUqmgUqkMLanG1MewxLFsEeuXbv1Srh2wTv2vf3kce04XoI7rn3//dmjmhbTnIix+HqR8/qVcO2C++o3Zn9UC0I0bN1BWVgZvb2+t5d7e3igoKNC7ja+vL1avXo2wsDCUlJRgw4YNiI6Oxv79+9G7d28AQEFBgVH7BIDk5GQkJSXpLM/NzYWnp6expdVYdZf+HB3rl279Uq4dsGz908IVmBau0Fmek5NjsTZUJOXzL+XaAdPXX1xcbPC6Vp8GL5PJtF4LIXSWqbVt2xZt27bVvI6IiMDly5fx3nvvaQKQsfsEgMTERMTHx2teK5VK+Pn5ISAgAF5eXkbVUxMqlQp5eXnw9/eHk5PVx6VbHOuXbv1Srh2wbP2xqzLx81Wl1jJ1z4+1SPn8S7l2wHz1q6/gGMJqAahx48ZwdnbW6Zm5du2aTg9OVXr06IHU1FTNax8fH6P3KZfLIZfLdZY7OTlZ9INp6ePZGtYv3fqlXDtg/vorPtcLAEZ0boYPxoWa7ZjGkPL5l3LtgOnrN2ZfVvuuu7m5ISwsDOnp6VrL09PTERkZafB+srKy4Ovrq3kdERGhs8/du3cbtU8iIkdh6+GHyFqsegksPj4ecXFxCA8PR0REBFavXo28vDxMnToVwKNLU1euXMH69esBPJrhFRgYiA4dOqC0tBSpqanYtGkTNm3apNnnyy+/jN69e2PRokUYOXIktm7dij179uDQoUNWqZGIyBr0PdQUABaMCsFTPQKs0ygiG2LVABQbG4vCwkLMmzcP+fn5CAkJwfbt2xEQ8OiHMz8/X2uAVGlpKV599VVcuXIFHh4e6NChA7799lsMGTJEs05kZCQ+//xzzJ49G3PmzEHLli2RlpaG7t27W7w+IiJr0Hd3Z4Dhh6g8mRBCVL+atCiVSigUChQVFVlsEHROTg4CAwMleS2Y9Uu3finXDpinfn3hx0kGzBtpe+FHyudfyrUD5qvfmN/fVp8FRkREplHZ3Z15g0MiXdKLnUREDojhh8g47AEiIrJz+mZ6MfwQVY09QEREdkxf+OFzvYiqxx4gIiI71SVpF27de6i1jPf4ITIMAxARkZ1JPZyLOV+dQsUpvJzmTmQ4BiAiIjuib7CzDMB8hh8iozAAERHZiRHLDuHElSKtZfU9XJA9d6CVWkRkvxiAiIjsAGd6EZkWAxARkY3TN9i5U3MFtk3vaaUWEdk/ToMnIrJhlc30Yvghqh32ABER2SB9g50BzvQiMhUGICIiG6NvsDNnehGZFgMQEZEN0TfYmTO9iEyPAYiIyEZwsDOR5TAAERFZWdqRPCRu+VlnOcMPkfkwABERWdn8b85oveZ4HyLz4zR4IiIrGbBkv84yD1cnXHpnKMMPkZmxB4iIyArazdkBWYVlvLMzkeUwABERWVD5+/vUcf2zE57jfYgsiwGIiMhC9E1xB4A5w9phXPdAyzeISMIYgIiILEDfFHeFx6N/gmMf87dGk4gkjQGIiMiMKnukRfP67jj4ej/k5ORYvlFExABERGQulV3yGtG5GT4YFwqVSmWFVhERwABERGQW+i55ebg64cz8wVZqERGVxwBERGRCqYdzMfurUzrLOcWdyLYwABERmUh1l7yIyHYwABERmUC7OTtw74HumJ4FfKQFkU1iACIiqoXKZnnV93BB9tyBVmgRERmCAYiIqIb0DXQGeMmLyB4wABERGamyXh/O8iKyHwxARERGqGygM2d5EdkXBiAiIgNUNr0d4EBnInvEAEREVI0Ryw7hxJUineUc6ExkvxiAiIiqUNn0dg50JrJvDEBERHpU1uvDgc5EjoEBiIiogsp6fTo1V2Db9J5WaBERmRoDEBHR/1TW6wNwoDORo2EAIiJC5b0+nN5O5JgYgIhI0tjrQyRNDEBEJFns9SGSLgYgIpIc9voQEQMQEUlGVXdzZq8PkbQwABGRJFT25HaAvT5EUsQAREQOrbIntwPs9SGSMgYgInJYrd/cjgcqobOcd3MmIgYgInI4Ue/sxZVb9/W+x2d4EREAOFm7AStWrEBQUBDc3d0RFhaGgwcPGrTdf//7X7i4uKBLly5ay9etWweZTKbzdf++/n8MichxpB7ORWDCt3rDT30PF+S8M5Thh4gAWLkHKC0tDTNmzMCKFSsQFRWFVatWYfDgwTh9+jT8/f0r3a6oqAhPP/00oqOj8fvvv+u87+XlhXPnzmktc3d3N3n7ich2VHZPHycZcDF5qBVaRES2zKo9QEuWLMHkyZMxZcoUtGvXDikpKfDz88PKlSur3O65557D+PHjERERofd9mUwGHx8frS8ickxdknYhMOHbSh9eyvBDRPpYrQeotLQUx44dQ0JCgtbymJgYZGRkVLrd2rVrceHCBaSmpmLBggV617l9+zYCAgJQVlaGLl26YP78+QgNrbzbu6SkBCUlJZrXSqUSAKBSqaBS6f6jamrqY1jiWLaI9Uu3/trU/vqXx7H9ZAEAoI6r9t9yrk4yZM2NqfG+LUXK5x6Qdv1Srh0wX/3G7M9qAejGjRsoKyuDt7e31nJvb28UFBTo3eaXX35BQkICDh48CBcX/U0PDg7GunXr0LFjRyiVSixduhRRUVE4fvw4WrdurXeb5ORkJCUl6SzPzc2Fp6enkZXVXF5ensWOZYtYv3Trr0nt08IVmBauqPT9nJycWrTIsqR87gFp1y/l2gHT119cXGzwulafBSaTybReCyF0lgFAWVkZxo8fj6SkJLRp06bS/fXo0QM9evTQvI6KikLXrl2xbNkyfPDBB3q3SUxMRHx8vOa1UqmEn58fAgIC4OXlZWxJRlOpVMjLy4O/vz+cnKw+Lt3iWL906ze29vAF6biv51IXAHRo5oW05/RfFrdVUj73gLTrl3LtgPnqV1/BMYTVAlDjxo3h7Oys09tz7do1nV4h4FGqO3r0KLKysvDiiy8CePQNFELAxcUFu3fvRv/+/XW2c3JywmOPPYZffvml0rbI5XLI5XK921ryg2np49ka1i/d+qurvaq7ODvCPX2kfO4Badcv5doB09dvzL6sFoDc3NwQFhaG9PR0jB49WrM8PT0dI0eO1Fnfy8sLJ0+e1Fq2YsUKfPfdd/jyyy8RFBSk9zhCCGRnZ6Njx46mLYCIzK6qh5ZydhcR1YZVL4HFx8cjLi4O4eHhiIiIwOrVq5GXl4epU6cCeHRp6sqVK1i/fj2cnJwQEhKitX3Tpk3h7u6utTwpKQk9evRA69atoVQq8cEHHyA7OxvLly+3aG1EVHNVPb4C4M0Miaj2rBqAYmNjUVhYiHnz5iE/Px8hISHYvn07AgIePZQwPz/f6AFSt27dwrPPPouCggIoFAqEhobi+++/R7du3cxRAhGZWFDCt9B9eMUjnZorsG16T4u2h4gck0wIUdm/NZKlVCqhUChQVFRksUHQOTk5CAwMlOS1YNYv3frL195q1g7oeWwXgEd3cc6eO9CyjbMAKZ97QNr1S7l2wHz1G/P72+qzwIiIQubu0ht+XJ1k+OUfQyzfICJyeAxARGQV7ebsgAzANxPb6rzHAc5EZG4MQERkUeWf2VXxDs4AsGBUCJ7qEWDpZhGRxDAAEZFFVPawUjXO7CIiS2IAIiKzqi74AMCppIGSHAhKRNbDAEREZlFd8OnUXIGvXoi0q2d2EZHjYAAiIpP6S+K3lU5nB4Dm9d3x34RoANJ9EjYRWR8DEBGZRHXBhzcxJCJbwgBERLUSmPBtle+X7/EhIrIVDEBEZLTUw7mY/dWpKtfhrC4ismUMQERksKqezq5Zh8GHiOwAAxARVcuQqew57/DOzURkPxiAiKhSVT2ZHQBkAC4x+BCRHWIAIiItL23MwrbjV6tch8/qIiJ7xwBERAAMu8xV38MF2XMHWqhFRETmwwBEJHHVTWMHOLCZiBwPAxCRBHVJ2oVb9x5WuQ7H9xCRI2MAIpIQQ3p7eJmLiKSAAYjIwRnS2wMAC0aF4KkeARZoERGR9TEAETkgQ+7UDACuTjL88o8hFmgREZFtYQAiciCGXOIC2NtDRMQARGTnWr+5HQ+qegz7/7C3h4joTwxARHYo6p29uHLrvkHr8hEVRES6GICI7IQhDyJV69RcgW3Te5q5RURE9osBiMiGGRN6PFydcGb+YDO3iIjIMTAAEdkYY0IPwEtcREQ1wQBEZCNC5u7C3WqexaXG0ENEVDsMQERWop6yXsfVCd9MbFvt+gw9RESmwwBEZEGG3qdHjaGHiMg8GICIzKjdnB24Z+BlLTWGHiIi82MAIjIxY3t53F2dAACnkgbCycnJHE0iIqIKGICIasnYwANoP4pCpVIhJyfHxK0iIqKqMAARGakmgQfgpS0iIlvCAERUjZoGHj5wlIjIdjEAEVVQ08DDh40SEdkPBiCStC5Ju3Dr3sMab8/LWkRE9okBiCSlpr07agw8RESOgQGIHFZtw059Dxdkzx1ootYQEZEtYQAiu1eTmw3qw94dIiLpYAAiu1LbXh21EZ2b4YNxoSbZFxER2R8GILI5purRUWte3x3/TYg22f6IiMj+MQCRVZSffaV+GnrI3F24W8vgw8tYRERkCAYgMhtTXa7Sp1NzBbZN72m2/RMRkWNjACKjmTPYVMQeHSIiMgcGIAJg2VBT0amkgcjJyeHT0ImIyGIYgOycNYOLoaqbcaVSmW7AMxERkSEYgCxMX2Ax5SBgS+MlKiIiskdWD0ArVqzAu+++i/z8fHTo0AEpKSno1atXtdv997//RZ8+fRASEoLs7Gyt9zZt2oQ5c+bgwoULaNmyJRYuXIjRo0ebqQLHw1BDRESOzqoBKC0tDTNmzMCKFSsQFRWFVatWYfDgwTh9+jT8/f0r3a6oqAhPP/00oqOj8fvvv2u9l5mZidjYWMyfPx+jR4/Gli1bMHbsWBw6dAjdu3c3d0lWxeBCRERkGJkQQljr4N27d0fXrl2xcuVKzbJ27dph1KhRSE5OrnS7J598Eq1bt4azszO++uorrR6g2NhYKJVK7NixQ7Ns0KBBaNCgATZu3GhQu5RKJRQKBYqKiuDl5WV8YUZSqVTIyclBYGCgJAcBs37p1i/l2gHWL+X6pVw7YL76jfn9bbUeoNLSUhw7dgwJCQlay2NiYpCRkVHpdmvXrsWFCxeQmpqKBQsW6LyfmZmJmTNnai0bOHAgUlJSKt1nSUkJSkpKNK+VSiWARyfIEgN01ceQ6mBg1i/d+qVcO8D6pVy/lGsHzFe/MfuzWgC6ceMGysrK4O3trbXc29sbBQUFerf55ZdfkJCQgIMHD8LFRX/TCwoKjNonACQnJyMpKUlneW5uLjw9PasrxWTy8vIsdixbxPqlW7+UawdYv5Trl3LtgOnrLy4uNnhdqw+ClslkWq+FEDrLAKCsrAzjx49HUlIS2rRpY5J9qiUmJiI+Pl7zWqlUws/PDwEBARa7BJaXlwd/f3/JdoWyfmnWL+XaAdYv5fqlXDtgvvrVV3AMYbUA1LhxYzg7O+v0zFy7dk2nBwd4lOqOHj2KrKwsvPjiiwAefQOFEHBxccHu3bvRv39/+Pj4GLxPNblcDrlcrrPcycnJoh9MSx/P1rB+6dYv5doB1i/l+qVcO2D6+o3Zl9W+625ubggLC0N6errW8vT0dERGRuqs7+XlhZMnTyI7O1vzNXXqVLRt2xbZ2dmaGV4RERE6+9y9e7fefRIREZE0WfUSWHx8POLi4hAeHo6IiAisXr0aeXl5mDp1KoBHl6auXLmC9evXw8nJCSEhIVrbN23aFO7u7lrLX375ZfTu3RuLFi3CyJEjsXXrVuzZsweHDh2yaG1ERERku6wagGJjY1FYWIh58+YhPz8fISEh2L59OwICAgAA+fn5Rg+QioyMxOeff47Zs2djzpw5aNmyJdLS0hz+HkBERERkOKveB8hW8T5AlsX6pVu/lGsHWL+U65dy7YBt3AdIet91IiIikjwGICIiIpIcBiAiIiKSHAYgIiIikhwGICIiIpIcqz8KwxapJ8YZc0vt2lCpVCguLoZSqZTsbADWL836pVw7wPqlXL+UawfMV7/697YhE9wZgPRQP0zNz8/Pyi0hIiIiYxUXF0OhUFS5Du8DpIdKpcLVq1fh6elZ5UNUTUX98NXLly9b5L5Dtob1S7d+KdcOsH4p1y/l2gHz1S+EQHFxMZo1a1ZtzxJ7gPRwcnJCixYtLH5cLy8vSf4gqLF+6dYv5doB1i/l+qVcO2Ce+qvr+VGT3oVHIiIikjwGICIiIpIcBiAbIJfLMXfuXMjlcms3xSpYv3Trl3LtAOuXcv1Srh2wjfo5CJqIiIgkhz1AREREJDkMQERERCQ5DEBEREQkOQxAREREJDkMQFYyYsQI+Pv7w93dHb6+voiLi8PVq1er3OaZZ56BTCbT+urRo4eFWmxaNalfCIG3334bzZo1g4eHB/r27Yuff/7ZQi02jZycHEyePBlBQUHw8PBAy5YtMXfuXJSWlla5naOc+5rW7wjnXm3hwoWIjIxEnTp1UL9+fYO2cZTzX5PaHenc//HHH4iLi4NCoYBCoUBcXBxu3bpV5Tb2fO5XrFiBoKAguLu7IywsDAcPHqxy/QMHDiAsLAzu7u74y1/+gg8//NCs7WMAspJ+/frhiy++wLlz57Bp0yZcuHABY8aMqXa7QYMGIT8/X/O1fft2C7TW9GpS/+LFi7FkyRL861//wpEjR+Dj44MBAwZont1mD86ePQuVSoVVq1bh559/xj//+U98+OGHePPNN6vd1hHOfU3rd4Rzr1ZaWoonnngCzz//vFHbOcL5r0ntjnTux48fj+zsbOzcuRM7d+5EdnY24uLiqt3OHs99WloaZsyYgVmzZiErKwu9evXC4MGDkZeXp3f9S5cuYciQIejVqxeysrLw5ptv4qWXXsKmTZvM10hBNmHr1q1CJpOJ0tLSSteZMGGCGDlypOUaZUHV1a9SqYSPj4945513NMvu378vFAqF+PDDDy3VTLNYvHixCAoKqnIdRz731dXvqOd+7dq1QqFQGLSuo51/Q2t3pHN/+vRpAUAcPnxYsywzM1MAEGfPnq10O3s99926dRNTp07VWhYcHCwSEhL0rv/666+L4OBgrWXPPfec6NGjh9nayB4gG3Dz5k18+umniIyMhKura5Xr7t+/H02bNkWbNm3w97//HdeuXbNQK83HkPovXbqEgoICxMTEaJbJ5XL06dMHGRkZlmqqWRQVFaFhw4bVrueI5x6ovn5HPvfGcNTzXxVHOveZmZlQKBTo3r27ZlmPHj2gUCiqrcXezn1paSmOHTumdd4AICYmptJaMzMzddYfOHAgjh49igcPHpilnQxAVvTGG2+gbt26aNSoEfLy8rB169Yq1x88eDA+/fRTfPfdd3j//fdx5MgR9O/fHyUlJRZqsWkZU39BQQEAwNvbW2u5t7e35j17dOHCBSxbtgxTp06tcj1HO/dqhtTvqOfeGI56/qvjSOe+oKAATZs21VnetGnTKmuxx3N/48YNlJWVGXXeCgoK9K7/8OFD3LhxwyztZAAyobfffltnsFrFr6NHj2rWf+2115CVlYXdu3fD2dkZTz/9NEQVN+aOjY3F0KFDERISguHDh2PHjh04f/48vv32W0uUVy1z1w8AMplM67UQQmeZNRhbOwBcvXoVgwYNwhNPPIEpU6ZUuX9HO/eAcfUDtnvugZrVbwxbPv/mrh1wnHOvr83V1WLL5746xp43fevrW24qLmbZq0S9+OKLePLJJ6tcJzAwUPP/jRs3RuPGjdGmTRu0a9cOfn5+OHz4MCIiIgw6nq+vLwICAvDLL7/UptkmY876fXx8ADz6K8HX11ez/Nq1azp/NViDsbVfvXoV/fr1Q0REBFavXm308ez93BtTv62fe8D4+mvLls6/OWt3pHN/4sQJ/P777zrvXb9+3ahabOncV6Zx48ZwdnbW6e2p6rz5+PjoXd/FxQWNGjUySzsZgExI/Qu9JtRJ15huzcLCQly+fFnrHwZrMmf9QUFB8PHxQXp6OkJDQwE8us584MABLFq0qGYNNiFjar9y5Qr69euHsLAwrF27Fk5OxnfE2vO5N7Z+Wz/3QO0++zVhS+ffnLU70rmPiIhAUVERfvzxR3Tr1g0A8MMPP6CoqAiRkZEGH8+Wzn1l3NzcEBYWhvT0dIwePVqzPD09HSNHjtS7TUREBL7++mutZbt370Z4eHi1Y2NrzGzDq6lSP/zwg1i2bJnIysoSOTk54rvvvhM9e/YULVu2FPfv39es17ZtW7F582YhhBDFxcXilVdeERkZGeLSpUti3759IiIiQjRv3lwolUprlVIjNalfCCHeeecdoVAoxObNm8XJkyfFuHHjhK+vr13Vf+XKFdGqVSvRv39/8dtvv4n8/HzNV3mOeu5rUr8QjnHu1XJzc0VWVpZISkoS9erVE1lZWSIrK0sUFxdr1nHU829s7UI41rkfNGiQ6NSpk8jMzBSZmZmiY8eOYtiwYVrrOMq5//zzz4Wrq6tYs2aNOH36tJgxY4aoW7euyMnJEUIIkZCQIOLi4jTrX7x4UdSpU0fMnDlTnD59WqxZs0a4urqKL7/80mxtZACyghMnToh+/fqJhg0bCrlcLgIDA8XUqVPFb7/9prUeALF27VohhBB3794VMTExokmTJsLV1VX4+/uLCRMmiLy8PCtUUDs1qV+IR1Ni586dK3x8fIRcLhe9e/cWJ0+etHDra2ft2rUCgN6v8hz13NekfiEc49yrTZgwQW/9+/bt06zjqOff2NqFcKxzX1hYKP72t78JT09P4enpKf72t7+JP/74Q2sdRzr3y5cvFwEBAcLNzU107dpVHDhwQPPehAkTRJ8+fbTW379/vwgNDRVubm4iMDBQrFy50qztkwlRzahTIiIiIgfDWWBEREQkOQxAREREJDkMQERERCQ5DEBEREQkOQxAREREJDkMQERERCQ5DEBEREQkOQxAROTQcnJyIJPJkJ2dbe2mEJENYQAiIrv2zDPPaD15u1GjRhg0aBBOnDgBAPDz80N+fj5CQkKs3FIisiUMQERk9wYNGoT8/Hzk5+dj7969cHFxwbBhwwAAzs7O8PHxgYsLn/1MRH9iACIiuyeXy+Hj4wMfHx906dIFb7zxBi5fvozr16/rXAIrKyvD5MmTERQUBA8PD7Rt2xZLly7V2t/+/fvRrVs31K1bF/Xr10dUVBRyc3OtUBkRmQv/JCIih3L79m18+umnaNWqFRo1aoQ7d+5ova9SqdCiRQt88cUXaNy4MTIyMvDss8/C19cXY8eOxcOHDzFq1Cj8/e9/x8aNG1FaWooff/wRMpnMShURkTkwABGR3fvmm29Qr149AMCdO3fg6+uLb775Bk5Oup3crq6uSEpK0rwOCgpCRkYGvvjiC4wdOxZKpRJFRUUYNmwYWrZsCQBo166dZQohIovhJTAisnv9+vVDdnY2srOz8cMPPyAmJgaDBw+u9LLVhx9+iPDwcDRp0gT16tXDv//9b+Tl5QEAGjZsiGeeeQYDBw7E8OHDsXTpUuTn51uyHCKyAAYgIrJ7devWRatWrdCqVSt069YNa9aswZ07d/Dvf/9bZ90vvvgCM2fOxKRJk7B7925kZ2dj4sSJKC0t1ayzdu1aZGZmIjIyEmlpaWjTpg0OHz5syZKIyMx4CYyIHI5MJoOTkxPu3bun897BgwcRGRmJadOmaZZduHBBZ73Q0FCEhoYiMTERERER+Oyzz9CjRw+ztpuILIc9QERk90pKSlBQUICCggKcOXMG06dPx+3btzF8+HCddVu1aoWjR49i165dOH/+PObMmYMjR45o3r906RISExORmZmJ3Nxc7N69G+fPn+c4ICIHwx4gIrJ7O3fuhK+vLwDA09MTwcHB+M9//oO+ffsiJydHa92pU6ciOzsbsbGxkMlkGDduHKZNm4YdO3YAAOrUqYOzZ8/ik08+QWFhIXx9ffHiiy/iueees3RZRGRGMiGEsHYjiIiIiCyJl8CIiIhIchiAiIiISHIYgIiIiEhyGICIiIhIchiAiIiISHIYgIiIiEhyGICIiIhIchiAiIiISHIYgIiIiEhyGICIiIhIchiAiIiISHIYgIiIiEhy/h+x0YAPxlRGtAAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(bias_list, abs_error_list, s=1)    \n",
    "plt.grid(which='major', color='#DDDDDD', linewidth=0.8)\n",
    "plt.title(f'Bias vs Weight for a Learning Rate of {lr}')\n",
    "plt.xlabel('Bias')\n",
    "plt.ylabel('Errors')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "dfb2235c-8e6c-4abc-baa4-67458f29e441",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Accuracy: 84.00%\n"
     ]
    }
   ],
   "source": [
    "def test_accuracy(x_values, y_values, bias, weight, samples):\n",
    "    \n",
    "    correct_estimates = 0\n",
    "    p_list = []\n",
    "    for row in range(samples):\n",
    "        xi = x_values[row+samples]\n",
    "        yi = y_values[row+samples]\n",
    "        \n",
    "        p = sigmoid(xi, bias, weight)\n",
    "        p_list.append(p)\n",
    "\n",
    "        predicted_class = 1 if p >= 0.5 else 0\n",
    "        \n",
    "        if predicted_class == yi:\n",
    "            correct_estimates += 1\n",
    "            \n",
    "    acc = (correct_estimates / samples) * 100\n",
    "\n",
    "    return acc, p_list\n",
    "\n",
    "# Example usage\n",
    "acc, p_list = test_accuracy(x_test, y_test, B0, B1, num_rows)\n",
    "print(f'Model Accuracy: {acc:.2f}%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "0ad51f24-0930-4977-ba88-aa71a53e23bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "p_array = np.array(p_list)\n",
    "colors = np.where(p_array < threshold, 'blue', 'red')    \n",
    "fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n",
    "\n",
    "ax1.scatter(x_test, p_list, s=1, color=colors)   \n",
    "ax1.set_title('Test Values for X and their Probabilities')\n",
    "ax1.axhline(y=0.5, color='black', linestyle='--')\n",
    "ax1.grid(which='major', color='#DDDDDD', linewidth=0.8)\n",
    "\n",
    "colors = np.where(y_test < threshold, 'blue', 'red')    \n",
    "\n",
    "ax2.scatter(x_test, y_test, s=1, color=colors)   \n",
    "ax2.set_title('Test Values for X and their Actual Outcomes')\n",
    "\n",
    "ax2.grid(which='major', color='#DDDDDD', linewidth=0.8)\n",
    "plt.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
